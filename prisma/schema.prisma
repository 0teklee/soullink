datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String                 @id @default(uuid())
  email            String                 @unique
  nickname         String                 @unique @db.Char(20)
  bio              String                 @db.Char(120)
  profilePic       String?
  isBlocked        Boolean
  blockReason      String                 @default("NULL")
  followers        Follow[]               @relation("following")
  following        Follow[]               @relation("follower")
  createdPlaylists Playlist[]
  likedPlayLists   PlaylistLikedByUsers[]
  likedSong        SongLikedByUsers[]
  myComments       Comment[]              @relation("author")
  profileComments  Comment[]              @relation("profile")
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  twitter          String?
  instagram        String?
  website          String?
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Playlist {
  id          String                 @id @default(uuid())
  title       String                 @unique @db.VarChar(40)
  coverImage  String?
  description String                 @db.VarChar(300)
  author      User                   @relation(fields: [authorId], references: [id])
  authorId    String
  songs       Song[]
  comments    Comment[]
  likedBy     PlaylistLikedByUsers[]
  playCount   Int                    @default(0)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model PlaylistLikedByUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String

  @@id([userId, playlistId])
}

model Song {
  id          String             @id @default(uuid())
  title       String
  artist      String
  url         String             @unique
  playlist    Playlist           @relation(fields: [playlistId], references: [id])
  playlistId  String
  likedUsers  SongLikedByUsers[]
  playedCount Int?               @default(0)
  thumbnail   String?
}

model SongLikedByUsers {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  song   Song   @relation(fields: [songId], references: [id])
  songId String

  @@id([userId, songId])
}

model Comment {
  id         String      @id @default(uuid())
  comment    String
  type       CommentType
  isPrivate  Boolean
  author     User        @relation("author", fields: [authorId], references: [id])
  authorId   String
  profile    User?       @relation("profile", fields: [profileId], references: [id])
  profileId  String
  playlist   Playlist?   @relation(fields: [playlistId], references: [id])
  playlistId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum CommentType {
  PLAYLIST
  USER
}
