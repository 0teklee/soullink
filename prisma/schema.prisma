datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  nickname            String                 @unique @db.Char(20)
  bio                 String                 @db.Char(120)
  profilePic          String?                @db.LongText()
  profileColor        String?                @db.LongText()
  profileBgColor      String?                @db.LongText()
  isBlocked           Boolean
  isEditor            Boolean                @default(false)
  blockReason         String                 @default("NULL")
  followers           Follow[]               @relation("following")
  following           Follow[]               @relation("follower")
  createdPlaylists    Playlist[]
  likedPlayLists      PlaylistLikedByUsers[]
  likedSong           SongLikedByUsers[]
  myComments          Comment[]              @relation("author")
  profileComments     Comment[]              @relation("profile")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  twitter             String?
  instagram           String?
  website             String?
  CommentLikedByUsers CommentLikedByUsers[]
  recentPlay          RecentPlay[]

  @@fulltext([nickname])
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Playlist {
  id                String                 @id @default(uuid())
  title             String                 @unique @db.VarChar(40)
  coverImage        String?                @db.Text()
  description       String                 @db.MediumText
  author            User                   @relation(fields: [authorId], references: [id])
  authorId          String
  bannerColor       String?                @db.LongText()
  bgColor           String?                @db.LongText()
  songs             Song[]
  comments          Comment[]
  likedBy           PlaylistLikedByUsers[]
  likedCount        Int                    @default(0)
  playedCount       Int                    @default(0)
  playedTime        Int                    @default(0)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  category          Category[]
  recentPlay        RecentPlay[]
  mood              Mood                   @relation(fields: [moodId], references: [id])
  moodId            String
  PlaylistSongIndex PlaylistSongIndex[]

  @@fulltext([title, description])
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(30)
  playlists Playlist[]

  @@fulltext([name])
}

model Mood {
  id       String     @id @default(uuid())
  name     String     @unique
  playlist Playlist[]
}

model RecentPlay {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  user      User[]
  playlist  Playlist[]
}

model PlaylistLikedByUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  createdAt  DateTime @default(now())

  @@id([userId, playlistId])
}

model Song {
  id                String              @id @default(uuid())
  title             String
  artist            String
  url               String              @unique
  playlist          Playlist            @relation(fields: [playlistId], references: [id])
  playlistId        String
  likedUsers        SongLikedByUsers[]
  likedCount        Int                 @default(0)
  playedCount       Int?                @default(0)
  thumbnail         String?
  PlaylistSongIndex PlaylistSongIndex[]

  @@fulltext([title, artist])
}

model PlaylistSongIndex {
  id         String   @id @default(uuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  song       Song     @relation(fields: [songId], references: [id])
  songId     String
  songIndex  Int
}

model SongLikedByUsers {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  song      Song     @relation(fields: [songId], references: [id])
  songId    String

  @@id([userId, songId])
}

model Comment {
  id         String                @id @default(uuid())
  comment    String
  type       CommentType
  isPrivate  Boolean
  isDeleted  Boolean               @default(false)
  author     User                  @relation("author", fields: [authorId], references: [id])
  authorId   String
  profile    User?                 @relation("profile", fields: [profileId], references: [id])
  profileId  String?
  playlist   Playlist?             @relation(fields: [playlistId], references: [id])
  playlistId String?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  likedBy    CommentLikedByUsers[]
}

model CommentLikedByUsers {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@id([userId, commentId])
}

enum CommentType {
  PLAYLIST
  USER
}
